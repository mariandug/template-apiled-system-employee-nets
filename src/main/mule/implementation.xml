<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:netsuite="http://www.mulesoft.org/schema/mule/netsuite" xmlns:json="http://www.mulesoft.org/schema/mule/json"
	xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core"
	xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd
http://www.mulesoft.org/schema/mule/json http://www.mulesoft.org/schema/mule/json/current/mule-json.xsd
http://www.mulesoft.org/schema/mule/netsuite http://www.mulesoft.org/schema/mule/netsuite/current/mule-netsuite.xsd">
	<flow name="postEmployeesFlow" doc:id="1acc4e5f-fc6b-4d5f-888f-f9855abcb7ab" >
		<logger level="INFO" doc:name="Logger" doc:id="0c597a7c-8630-4cb5-adbd-0e4ab1978bc4" message="employee=#[payload]"/>
		<json:validate-schema doc:name="Validate schema" doc:id="419b6ba5-632c-4c7f-8b06-cb0e6154752d" schema="api/examples/post_employees_example.json"/>
		<logger level="INFO" doc:name="Log MOCK check unused user in Netsuite" doc:id="dc523360-2c22-49e7-b4ed-854b6b5e79ab" message="MOCK checking unused name in Netsuite"/>
		<ee:transform doc:name="Prepare SearchEmployees request" doc:id="bb0d5d62-fea3-4ae8-a0e0-82cd70a33ca1" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/java
---
{
	basic: {
		firstName: {
			operator: "IS",
			searchValue: payload.firstName
		},
		lastName: {
			operator: "IS",
			searchValue: payload.lastName
		}
	}
} as Object {
	class : "org.mule.module.netsuite.extension.api.EmployeeSearch"
}]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<ee:transform doc:name="MOCK Search call to Netsuite" doc:id="e232a41e-8910-4d81-9780-d7e4e97d7381" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
{
	"result" : "OK"
}]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<choice doc:name="Doesn't Employee with the same firstName and lastName exist?" doc:id="e6e60291-b352-45eb-9a7d-2d84de7faf77" >
			<when expression="payload.result=='OK'" >
				<logger level="INFO" doc:name="Log MOCK insert employee to Netsuite" doc:id="3c57fa70-89fd-46d1-b971-88262282bcde" message="MOCK inserting of new employee to Netsuite"/>
				<ee:transform doc:name="MOCK insert emplyee to Netsuite" doc:id="127969ed-4892-46d3-a30d-6bad8935694a" >
					<ee:message >
						<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
{
	"internalId" : "NetsuiteId" ++ uuid()
}]]></ee:set-payload>
					</ee:message>
				</ee:transform>
				<ee:transform doc:name="Response, status code 201" doc:id="95367726-b6f2-47ec-bdbe-7f80f4bd979f" >
					<ee:message >
						<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
{ 
	"id": payload.internalId
}]]></ee:set-payload>
					</ee:message>
					<ee:variables >
						<ee:set-variable variableName="httpStatus" ><![CDATA[%dw 2.0
output application/java
---
201]]></ee:set-variable>
						<ee:set-variable variableName="outboundHeaders" ><![CDATA[%dw 2.0
output application/java
---
{"Location":"http://" ++ p("api.domain") ++ ":" ++ p("http.port") ++ p("api.basePath") ++ "/employees/" ++ payload.internalId}]]></ee:set-variable>
					</ee:variables>
				</ee:transform>
			</when>
			<otherwise >
				<ee:transform doc:name="Response, status code 422" doc:id="c18c3d4d-0920-4949-a541-2d7211ed5768" >
					<ee:message >
						<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
{ 
	"message": "There is already Employee with the same firstName and lastName in Netsuite."
}]]></ee:set-payload>
					</ee:message>
					<ee:variables >
						<ee:set-variable variableName="httpStatus" ><![CDATA[%dw 2.0
output application/java
---
	422]]></ee:set-variable>
					</ee:variables>
				</ee:transform>
			</otherwise>
		</choice>
	</flow>
	<flow name="getEmployeesFlow" doc:id="e6a9bcf6-03e7-4428-8388-aaa1c7ce8d79" >
		<ee:transform doc:name="Transform Message" doc:id="ec1261c9-de57-4254-9c7d-6136a1601c7f" xsi:schemaLocation="http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
[
  {
    id: "21001",
    firstName: "Logan",
    lastName: "McNeil",
    addressLine: "3939 The Embarcadero",
    city: "San Francisco",
    postalCode: "94111",
    country: "USA",
    region: "USA-CA",
    birthDate: "1972-05-25-07:00",
    phone: "444-8262",
    email: "kit.wong+jobvite@mulesoft.com",
    positionTitle: "Chief Human Resources Officer",
    hireDate: "2000-01-01-08:00",
    weeklyHours: "40"
  }, 
  {
    id: "21002",
    firstName: "Steve",
    lastName: "Morgan",
    addressLine: "965 Tulare Avenue",
    city: "Berkeley",
    postalCode: "94707",
    country: "USA",
    region: "USA-CA",
    birthDate: "1959-05-22-07:00",
    phone: "635-1856",
    email: "smorgan@workday.net",
    positionTitle: "Chief Executive Officer",
    hireDate: "2000-01-01-08:00",
    weeklyHours: "40"
  }, 
  {
    id: "21003",
    firstName: "Oliver",
    lastName: "Reynolds",
    addressLine: "2788 Clay Street",
    city: "San Francisco",
    postalCode: "94111",
    country: "USA",
    region: "USA-CA",
    birthDate: "1962-04-10-08:00",
    phone: "435-1163",
    email: "oreynolds@workday.net",
    positionTitle: "Chief Information Officer",
    hireDate: "2000-01-01-08:00",
    weeklyHours: "40"
  }, 
  {
    id: "21004",
    firstName: "Maximilian",
    lastName: "Schneider",
    addressLine: "300 Road st",
    city: "San Francisco",
    postalCode: "94102",
    country: "USA",
    region: "USA-CA",
    birthDate: "1967-01-19-08:00",
    phone: "766-0809",
    email: "mschneider@workday.net",
    positionTitle: "Chief Operating Officer",
    hireDate: "2000-01-01-08:00",
    weeklyHours: "40"
  }, 
  {
    id: "21005",
    firstName: "Teresa",
    lastName: "Serrano",
    addressLine: "1155 Avenue of the Americas",
    city: "New York",
    postalCode: "10036",
    country: "USA",
    region: "Not presented",
    birthDate: "1957-05-05-07:00",
    phone: "755-8292",
    email: "tserrano@workday.net",
    positionTitle: "Chief Financial Officer",
    hireDate: "2000-01-01-08:00",
    weeklyHours: "40"
  }, 
  {
    id: "21006",
    firstName: "Maria",
    lastName: "Cardoza",
    addressLine: "4432 John Daly Blvd.",
    city: "Daly City",
    postalCode: "94707",
    country: "USA",
    region: "USA-CA",
    birthDate: "1971-01-29-08:00",
    phone: "445-6767",
    email: "mcardoza@workday.net",
    positionTitle: "Director, Employee Benefits",
    hireDate: "2000-01-01-08:00",
    weeklyHours: "40"
  }, 
  {
    id: "21007",
    firstName: "Jacqueline",
    lastName: "Desjardins",
    addressLine: "1888 Broadway Street  Apt. # 910",
    city: "San Francisco",
    postalCode: "94109",
    country: "USA",
    region: "USA-CA",
    birthDate: "1969-02-17-08:00",
    phone: "828-1466",
    email: "jdesjardins@workday.net",
    positionTitle: "Director, Recruiting Services",
    hireDate: "2000-01-01-08:00",
    weeklyHours: "40"
  }, 
  {
    id: "21008",
    firstName: "Betty",
    lastName: "Liu",
    addressLine: "3939 The Embarcadero",
    city: "San Francisco",
    postalCode: "94111",
    country: "USA",
    region: "USA-CA",
    birthDate: "1990-11-22-08:00",
    phone: "445-6778",
    email: "bliu@workday.net",
    positionTitle: "Director, Payroll Operations",
    hireDate: "2000-01-01-08:00",
    weeklyHours: "40"
  }, 
  {
    id: "21009",
    firstName: "Pedro",
    lastName: "Santiago",
    addressLine: "5067 Thomas Street",
    city: "Annapolis",
    postalCode: "21409",
    country: "USA",
    region: "Not presented",
    birthDate: "1960-02-29-08:00",
    phone: "431-1256",
    email: "psantiago@workday.net",
    positionTitle: "Director, Workforce Planning",
    hireDate: "2000-01-01-08:00",
    weeklyHours: "40"
  }, 
  {
    id: "21012",
    firstName: "Norman",
    lastName: "Chan",
    addressLine: "541 Biscayne Drive",
    city: "San Rafael",
    postalCode: "94901",
    country: "USA",
    region: "USA-CA",
    birthDate: "1979-08-02-07:00",
    phone: "333-4554",
    email: "nchan@workday.net",
    positionTitle: "Staff Payroll Specialist",
    hireDate: "2000-01-01-08:00",
    weeklyHours: "40"
  }, 
  {
    id: "21010",
    firstName: "Lillian",
    lastName: "Chu",
    addressLine: "1515 Spruce Street",
    city: "Berkeley",
    postalCode: "94709",
    country: "USA",
    region: "USA-CA",
    birthDate: "1970-07-22-07:00",
    phone: "692-3646",
    email: "lchu@workday.net",
    positionTitle: "Senior Benefits Analyst",
    hireDate: "2000-01-01-08:00",
    weeklyHours: "40"
  }, 
  {
    id: "21014",
    firstName: "James",
    lastName: "Moore",
    addressLine: "312 Oak Street  Apt. 5",
    city: "Oakland",
    postalCode: "94607",
    country: "USA",
    region: "USA-CA",
    birthDate: "1977-06-19-07:00",
    phone: "838-1622",
    email: "jmoore@workday.net",
    positionTitle: "Staff Recruiter",
    hireDate: "2000-01-01-08:00",
    weeklyHours: "40"
  }, 
  {
    id: "21011",
    firstName: "Isabel",
    lastName: "Arguello",
    addressLine: "3939 The Embarcadero",
    city: "San Francisco",
    postalCode: "94111",
    country: "USA",
    region: "USA-CA",
    birthDate: "1967-04-15-08:00",
    phone: "722-9845",
    email: "iarguello@workday.net",
    positionTitle: "Staff Payroll Specialist",
    hireDate: "2000-01-01-08:00",
    weeklyHours: "40"
  }, 
  {
    id: "21013",
    firstName: "David",
    lastName: "Spiegel",
    addressLine: "4255 Fourth Street",
    city: "Santa Rosa",
    postalCode: "95405",
    country: "USA",
    region: "USA-CA",
    birthDate: "1980-09-07-07:00",
    phone: "824-1142",
    email: "dspiegel@workday.net",
    positionTitle: "Senior Payroll Specialist",
    hireDate: "2000-01-01-08:00",
    weeklyHours: "40"
  }, 
  {
    id: "21015",
    firstName: "Daniel",
    lastName: "Betancourt",
    addressLine: "185 Carl Street",
    city: "San Francisco",
    postalCode: "94117",
    country: "USA",
    region: "USA-CA",
    birthDate: "1982-07-22-07:00",
    phone: "635-9002",
    email: "dbetancourt@workday.net",
    positionTitle: "Senior Workforce Analyst",
    hireDate: "2000-01-01-08:00",
    weeklyHours: "40"
  }, 
  {
    id: "21016",
    firstName: "Chad",
    lastName: "Anderson",
    addressLine: "200 W. Grand  Apt. 1965",
    city: "Chicago",
    postalCode: "60610",
    country: "USA",
    region: "Not presented",
    birthDate: "1974-05-22-07:00",
    phone: "992-4345",
    email: "canderson@workday.net",
    positionTitle: "Senior Benefits Analyst",
    hireDate: "2000-01-01-08:00",
    weeklyHours: "40"
  }, 
  {
    id: "21017",
    firstName: "Sara",
    lastName: "Goldstein",
    addressLine: "845 Third Avenue  Apt. 4",
    city: "New York",
    postalCode: "10022",
    country: "USA",
    region: "Not presented",
    birthDate: "1958-03-05-08:00",
    phone: "559-2314",
    email: "sgoldstein@workday.net",
    positionTitle: "Director, Accounting",
    hireDate: "2000-01-01-08:00",
    weeklyHours: "40"
  }, 
  {
    id: "21018",
    firstName: "Jerome",
    lastName: "Williams",
    addressLine: "1788 North Halsted",
    city: "Chicago",
    postalCode: "60610",
    country: "USA",
    region: "Not presented",
    birthDate: "1978-10-14-07:00",
    phone: "822-0712",
    email: "jwilliams@workday.net",
    positionTitle: "Senior Accountant",
    hireDate: "2000-01-01-08:00",
    weeklyHours: "40"
  }, 
  {
    id: "21019",
    firstName: "Angela",
    lastName: "Mora",
    addressLine: "5801 College Avenue",
    city: "Oakland",
    postalCode: "94618",
    country: "USA",
    region: "USA-CA",
    birthDate: "1967-09-20-07:00",
    phone: "922-5201",
    email: "amora@workday.net",
    positionTitle: "Accounting Specialist - AR",
    hireDate: "2000-01-01-08:00",
    weeklyHours: "40"
  }, 
  {
    id: "21020",
    firstName: "Andrew",
    lastName: "Walton",
    addressLine: "7835 Sonoma Hwy",
    city: "Kenwood",
    postalCode: "95452",
    country: "USA",
    region: "USA-CA",
    birthDate: "1974-06-04-07:00",
    phone: "826-1182",
    email: "awalton@workday.net",
    positionTitle: "Tax Accountant",
    hireDate: "2000-01-01-08:00",
    weeklyHours: "40"
  }
]]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<ee:transform doc:name="Prepare SearchEmployees request" doc:id="58da9d18-6fe7-46b2-9b65-a5acd7f2d3a0" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/java
---
{
	(basic: {
		lastModifiedDate: {
			operator: "AFTER",
			searchValue: attributes.queryParams.modifiedAfter as Date
		}
	}) if (attributes.queryParams.modifiedAfter?)
} as Object {
	class : "org.mule.module.netsuite.extension.api.EmployeeSearch"
}]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<ee:transform doc:name="MOCK Search call to Netsuite" doc:id="15a4fc15-0103-425c-8f9a-fd7d2439b9be" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
{
	"result" : "OK"
}]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<ee:transform doc:name="Prepare GetList of Employees request" doc:id="95b2bee9-df5b-4dbb-8154-75e6758bb235" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/java
---
payload map ({
	internalId: $.internalId,
	"type": "EMPLOYEE"
} as Object {
	class : "org.mule.module.netsuite.extension.api.RecordRef"
})]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<ee:transform doc:name="MOCK get list of Emplyeees from Netsuite" doc:id="8c694c5b-6c1a-4278-9b7a-5993910f7648" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/java
---
{
}]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<ee:transform doc:name="Apply pagination" doc:id="477090b4-bfb2-4120-abb0-87994433fc23" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/java
---
payload map using (address = $.record.addressbookList.addressbook[0].addressbookAddress when ($.record.addressbookList != null and ((sizeOf $.record.addressbookList.addressbook) > 0)) otherwise {}){
	id: $.record.internalId,
	firstName: $.record.firstName when ($.record.firstName != null) otherwise "",
	lastName: $.record.lastName when ($.record.lastName != null) otherwise "",
	(addressLine: address.addr1) when (address.addr1 != null),
	(city: address.city) when (address.city != null),
	(postalCode: address.'zip') when (address.'zip' != null),
	(country: lookup("lookUpRealCountryNamefromNetsuiteEnumFlow",address.country)) when (address.country != null),
	(region: address.state) when (address.state != null),
	(birthDate: ($.record.birthDate as :datetime)[0..9] ++ ($.record.birthDate as :datetime)[19..-1] ) when ($.record.birthDate != null),
	(phone: $.record.phone) when ($.record.phone != null),
	(email: $.record.email) when ($.record.email != null),
	(positionTitle: $.record.title) when ($.record.title != null),
	hireDate: ($.record.hireDate[0..9] ++ $.record.hireDate[19..-1]) when ($.record.hireDate != null) otherwise ""
}]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<ee:transform doc:name="Apply ordering and transform payload into JSON output structure" doc:id="f230ddcd-8844-4654-aabe-f9c49952e1d8" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/json

var orderByKeyMap = { 
	id: "id",
	firstName: "firstName",
	lastName :"lastName",
 	hireDate:"hireDate"	
}
function applyOrdering(result){
  result: [] when (result is :empty) otherwise
          ( (result orderBy $[orderByKeyMap[flowVars.queryParams.orderBy]]) when ((flowVars.queryParams.order == "asc" or flowVars.queryParams.order == null) and orderByKeyMap[flowVars.queryParams.orderBy] != null) otherwise
          ( ((result orderBy $[orderByKeyMap[flowVars.queryParams.orderBy]])[-1..0]) when (flowVars.queryParams.order == "desc" and orderByKeyMap[flowVars.queryParams.orderBy] != null) otherwise
          ( result)))
}
---
applyOrdering(payload).result]]></ee:set-payload>
			</ee:message>
		</ee:transform>
	</flow>
	<flow name="getEmployeesById" doc:id="29cf75c4-848b-4f0a-a9c8-c6052c36b9d3" >
		<ee:transform doc:name="Prepare EmployeeSearch request" doc:id="2ffb078a-7d3a-4f5e-9cce-760546c628a4" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/java
---
{
	basic: {
		internalIdNumber: {
			operator: "EQUAL_TO",
			searchValue: vars.id
		}
	}
} as Object {
	class : "org.mule.module.netsuite.extension.api.EmployeeSearch"
}]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<ee:transform doc:name="MOCK Netsuite search" doc:id="5cf5fda3-0bec-48f8-b422-93454daadd7f" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
{
	"result" : "OK"
}]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<choice doc:name="Does employee exists" doc:id="038df114-4563-418b-a67b-7192eed86025" >
			<when expression="payload.result=='OK'" >
				<ee:transform doc:name="Get Employee from Netsuite" doc:id="03d495ef-fa2f-4ac5-b90a-bf04733c2d95" >
					<ee:message >
						<ee:set-payload ><![CDATA[%dw 2.0
output application/java
---
{
	internalId: vars.id,
	"type": "EMPLOYEE"
} as Object {
	class : "org.mule.module.netsuite.extension.api.RecordRef"
}]]></ee:set-payload>
					</ee:message>
				</ee:transform>
				<ee:transform doc:name="Transform Message" doc:id="2ce29851-7f20-4b6c-966b-5ceba42f65e9" >
					<ee:message >
						<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
using (address = payload.addressbookList.addressbook.addressbookAddress[0] when (payload.addressbookList != null and ((sizeOf payload.addressbookList) > 0)) otherwise {})
{
	id: payload.internalId,
	firstName: payload.firstName when (payload.firstName != null) otherwise "",
	lastName: payload.lastName when (payload.lastName != null) otherwise "",
	(addressLine: address.addr1) when (address.addr1 != null),
	(city: address.city) when (address.city != null),
	(postalCode: address.zip) when (address.zip != null),
	(country: lookup("lookUpRealCountryNamefromNetsuiteEnumFlow",address.country)) when (address.country != null),
	(region: address.state) when (address.state != null),
	(birthDate: (payload.birthDate as :datetime)[0..9] ++ (payload.birthDate as :datetime)[19..-1] ) when (payload.birthDate != null),
	(phone: payload.phone) when (payload.phone != null),
	(email: payload.email) when (payload.email != null),
	(positionTitle: payload.title) when (payload.title != null),
	hireDate: (payload.hireDate[0..9] ++ payload.hireDate[19..-1]) when (payload.hireDate != null) otherwise ""
}]]></ee:set-payload>
					</ee:message>
				</ee:transform>
			</when>
			<otherwise >
				<ee:transform doc:name="Response, status code 404" doc:id="ee3f55d0-4f0c-4e67-9471-a70b9faf5b97" >
					<ee:message >
						<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
{ 
	"message": "Resource not found"
}]]></ee:set-payload>
					</ee:message>
					<ee:variables >
						<ee:set-variable variableName="httpStatus" ><![CDATA[%dw 2.0
output application/java
---
	404]]></ee:set-variable>
					</ee:variables>
				</ee:transform>
			</otherwise>
		</choice>
	</flow>
	<flow name="patchEmployeesById" doc:id="a3d942e5-c253-4cdb-9af6-2f20798c9755" >
		<json:validate-schema doc:name="Copy_of_Validate schema" doc:id="ee1887a5-909d-4be2-bbd4-506e0ebd611d" schema="api/examples/post_employees_example.json" />
		<ee:transform doc:name="Prepare EmployeeSearch request" doc:id="f96b2166-ffe7-4845-b3c7-511ae2830415" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/java
---
{
	basic: {
		internalIdNumber: {
			operator: "EQUAL_TO",
			searchValue: vars.id
		}
	}
} as Object {
	class : "org.mule.module.netsuite.extension.api.EmployeeSearch"
}]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<ee:transform doc:name="MOCK Netsuite search" doc:id="7db31d75-7057-4038-8cc4-bc6ef9ba70b4" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
{
	"result" : "OK"
}]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<choice doc:name="Does employee exists" doc:id="81545ef7-887c-4145-b4e6-26b0ecfe048f" >
			<when expression="payload.result=='OK'"  >
				<ee:transform doc:name="Prepare UpdateEmployee request" doc:id="b96cf59d-5cf7-4d05-a5d4-c356a86c9ba4" >
					<ee:message >
						<ee:set-payload ><![CDATA[%dw 2.0
output application/java
---
{
	internalId: flowVars.id,
	(addressbookList: {
		addressbook: [{
			addressbookAddress: {
				(addr1: flowVars.input.addressLine) when (flowVars.input.addressLine?),
				(city: flowVars.input.city) when (flowVars.input.city?),
				(country: lookup("lookUpNetsuiteCountryEnumFlow", flowVars.input.country)) when (flowVars.input.country?),
				(state: flowVars.input.region) when (flowVars.input.region?),
				(zip: flowVars.input.postalCode) when (flowVars.input.postalCode?)
			}
		}]
	})when (flowVars.input.addressLine? or flowVars.input.city? or flowVars.input.country? or flowVars.input.region? or flowVars.input.postalCode?),
	(birthDate: (flowVars.input.birthDate[0..9] ++ |00:00| as :time ++  flowVars.input.birthDate[10..-1] as :timezone) as :datetime) when (flowVars.input.birthDate?),
	(earningList: {
		employeeEarning: [{
			(defaultHours: flowVars.input.weeklyHours) when (flowVars.input.weeklyHours?),
			(payRate: flowVars.input.basePay ++ " " ++ flowVars.input.currency) when (flowVars.input.basePay? and flowVars.input.currency?)
		}]
	}) when (flowVars.input.weeklyHours? or (flowVars.input.basePay? and flowVars.input.currency?)),
	(email: flowVars.input.email) when (flowVars.input.email?),
	(firstName: flowVars.input.firstName) when (flowVars.input.firstName?),
	(hireDate: flowVars.input.hireDate) when (flowVars.input.hireDate?),
	(lastName: flowVars.input.lastName) when (flowVars.input.lastName?),
	(phone: flowVars.input.phone) when (flowVars.input.phone?),
	(ratesList: {
		employeeRates: [{
			(entityCurrency: {
				name: flowVars.input.currency
			}) when (flowVars.input.currency?),
			(rate: flowVars.input.basePay) when (flowVars.input.basePay?)
		}]
	}) when (flowVars.input.currency? or flowVars.input.basePay?),
	subsidiary: {
		internalId: p("nets.customer.subsidiary.internalId")
	},
	(title: flowVars.input.positionTitle) when (flowVars.input.positionTitle?)
}]]></ee:set-payload>
					</ee:message>
				</ee:transform>
				<ee:transform doc:name="Transform Message" doc:id="70c561c5-8821-4458-81f9-b2962b38dd14" >
					<ee:message >
						<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
{
	status: "OK"
}]]></ee:set-payload>
					</ee:message>
				</ee:transform>
			</when>
			<otherwise >
				<ee:transform doc:name="Response, status code 404" doc:id="1316fa88-1a04-41d0-b49a-9b233346a834" >
					<ee:message >
						<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
{ 
	"message": "Resource not found"
}]]></ee:set-payload>
					</ee:message>
					<ee:variables >
						<ee:set-variable variableName="httpStatus" ><![CDATA[%dw 2.0
output application/java
---
	404]]></ee:set-variable>
					</ee:variables>
				</ee:transform>
			</otherwise>
		</choice>
	</flow>
	<flow name="deleteEmployeesById" doc:id="92c0f343-c2fa-4579-a826-1df418f02e6a" >
		<ee:transform doc:name="Prepare EmployeeSearch request" doc:id="03a9ee3f-937b-4e40-8f37-1b447795f683" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/java
---
{
	basic: {
		internalIdNumber: {
			operator: "EQUAL_TO",
			searchValue: vars.id
		}
	}
} as Object {
	class : "org.mule.module.netsuite.extension.api.EmployeeSearch"
}]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<ee:transform doc:name="MOCK Netsuite search" doc:id="93448ad8-2ca6-43a4-ac04-ea4c5940ac04" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
{
	"result" : "OK"
}]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<choice doc:name="Does employee exists" doc:id="052668d4-bd8f-4e1b-abad-2afd5bc67f40" >
			<when expression="payload.result=='OK'" >
				<ee:transform doc:name="Prepare UpdateEmployee request" doc:id="83db78f1-5367-4c97-bd06-720d3824698c" >
					<ee:message >
						<ee:set-payload ><![CDATA[%dw 2.0
output application/java
---
{
	internalId: flowVars.id,
	(addressbookList: {
		addressbook: [{
			addressbookAddress: {
				(addr1: flowVars.input.addressLine) when (flowVars.input.addressLine?),
				(city: flowVars.input.city) when (flowVars.input.city?),
				(country: lookup("lookUpNetsuiteCountryEnumFlow", flowVars.input.country)) when (flowVars.input.country?),
				(state: flowVars.input.region) when (flowVars.input.region?),
				(zip: flowVars.input.postalCode) when (flowVars.input.postalCode?)
			}
		}]
	})when (flowVars.input.addressLine? or flowVars.input.city? or flowVars.input.country? or flowVars.input.region? or flowVars.input.postalCode?),
	(birthDate: (flowVars.input.birthDate[0..9] ++ |00:00| as :time ++  flowVars.input.birthDate[10..-1] as :timezone) as :datetime) when (flowVars.input.birthDate?),
	(earningList: {
		employeeEarning: [{
			(defaultHours: flowVars.input.weeklyHours) when (flowVars.input.weeklyHours?),
			(payRate: flowVars.input.basePay ++ " " ++ flowVars.input.currency) when (flowVars.input.basePay? and flowVars.input.currency?)
		}]
	}) when (flowVars.input.weeklyHours? or (flowVars.input.basePay? and flowVars.input.currency?)),
	(email: flowVars.input.email) when (flowVars.input.email?),
	(firstName: flowVars.input.firstName) when (flowVars.input.firstName?),
	(hireDate: flowVars.input.hireDate) when (flowVars.input.hireDate?),
	(lastName: flowVars.input.lastName) when (flowVars.input.lastName?),
	(phone: flowVars.input.phone) when (flowVars.input.phone?),
	(ratesList: {
		employeeRates: [{
			(entityCurrency: {
				name: flowVars.input.currency
			}) when (flowVars.input.currency?),
			(rate: flowVars.input.basePay) when (flowVars.input.basePay?)
		}]
	}) when (flowVars.input.currency? or flowVars.input.basePay?),
	subsidiary: {
		internalId: p("nets.customer.subsidiary.internalId")
	},
	(title: flowVars.input.positionTitle) when (flowVars.input.positionTitle?)
}]]></ee:set-payload>
					</ee:message>
				</ee:transform>
				<ee:transform doc:name="Transform Message" doc:id="e08d25c8-8eae-44a6-8fff-7d45adca0df3" >
					<ee:message >
						<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
{
	status: "OK"
}]]></ee:set-payload>
					</ee:message>
				</ee:transform>
			</when>
			<otherwise >
				<ee:transform doc:name="Copy_of_Response, status code 404" doc:id="04dd67cd-1f49-4b81-a08d-998d301f97fd" >
					<ee:message >
						<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
{ 
	"message": "Resource not found"
}]]></ee:set-payload>
					</ee:message>
					<ee:variables >
						<ee:set-variable variableName="httpStatus" ><![CDATA[%dw 2.0
output application/java
---
	404]]></ee:set-variable>
					</ee:variables>
				</ee:transform>
			</otherwise>
		</choice>
	</flow>
</mule>
